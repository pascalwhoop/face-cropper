// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { ProcessImageApiV1ProcessImagePostData, ProcessImageApiV1ProcessImagePostError, HealthCheckHealthGetData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Process Image
 * Process an uploaded image to detect and crop faces.
 *
 * Args:
 * file (UploadFile): The image file to process
 * aspect_ratio (str): Desired aspect ratio for the output image
 * zoom (str): Zoom level (0.0 means maximum padding, 1.0 means tight crop)
 *
 * Returns:
 * StreamingResponse: The processed image
 *
 * Raises:
 * HTTPException: If the file is invalid or processing fails
 */
export const processImageApiV1ProcessImagePost = <ThrowOnError extends boolean = false>(options?: Options<ProcessImageApiV1ProcessImagePostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, ProcessImageApiV1ProcessImagePostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/process-image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};